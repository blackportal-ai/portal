---
import { Link } from '@/components/ui/Link';
import { Code } from 'astro-expressive-code/components';
---

<section class="py-20">
  <div class="container">
    <h2 class="mb-6 text-center text-3xl font-bold">Get Started with Delta</h2>

    <div class="prose prose-sm mx-auto max-w-5xl dark:prose-invert">
      <div>
        <h3>Adding Delta to Your Project</h3>
        <p>
          To add the Delta library to your Rust project, you need to include it
          in your <code>Cargo.toml</code> file. Follow these steps:
        </p>
        <ol>
          <li>Open your project's <code>Cargo.toml</code> file.</li>
          <li>Add the following line under <code>[dependencies]</code>:</li>
        </ol>
        <Code
          code={['[dependencies]', 'deltaml = "0.1.0"'].join('\n')}
          lang="toml"
          title="Cargo.toml"
        />
        <p>
          Currently, we have published Delta to <Link
            href="https://crates.io/crates/deltaml">deltaml</Link
          >, but note that this is still experimental in alpha stage so things
          might break in the upcoming iterations.
        </p>
      </div>

      <div>
        <h3>1. Create the <code>main</code> Function</h3>
        <p>
          We start with an empty asynchronous main function using <code
            >#[tokio::main]</code
          >.
        </p>
        <Code
          code={[
            '#[tokio::main]',
            'async fn main() {',
            '    println!("Starting the Delta example...");',
            '}',
          ].join('\n')}
          lang="rust"
          title="src/main.rs"
        />

        <h3>2. Define a Neural Network</h3>
        <p>
          Next, we create a neural network using Deltaâ€™s <code>Sequential</code>
          model.
        </p>
        <Code
          code={[
            'let mut model = Sequential::new()',
            '    .add(Flatten::new(Shape::from(IxDyn(&[32, 32, 3])))) // CIFAR-10: 32x32x3 -> 3072',
            '    .add(Dense::new(128, Some(ReluActivation::new()), true)) // Input: 3072, Output: 128',
            '    .add(Dense::new(10, Some(SoftmaxActivation::new()), false)); // Output: 10 classes',
            '',
            'model.summary();',
          ].join('\n')}
          lang="rust"
          title="src/main.rs"
        />

        <h3>3. Compile the Model</h3>
        <p>
          Before training, we need to compile the model by defining the
          optimizer and loss function.
        </p>
        <Code
          code={[
            'let optimizer = Adam::new(0.001);',
            'model.compile(optimizer, MeanSquaredLoss::new());',
          ].join('\n')}
          lang="rust"
          title="src/main.rs"
        />

        <h3>4. Load the Dataset</h3>
        <p>
          Now, we load the CIFAR-10 dataset for training, validation, and
          testing.
        </p>
        <Code
          code={[
            'let mut train_data = Cifar10Dataset::load_train().await;',
            'let val_data = Cifar10Dataset::load_val().await;',
            'let test_data = Cifar10Dataset::load_test().await;',
            '',
            'println!("Train dataset size: {}", train_data.len());',
          ].join('\n')}
          lang="rust"
          title="src/main.rs"
        />

        <h3>5. Train the Model</h3>
        <p>We train the model using the loaded training data.</p>
        <Code
          code={[
            'let epoch = 10;',
            'let batch_size = 32;',
            '',
            'match model.fit(&mut train_data, epoch, batch_size) {',
            '    Ok(_) => println!("Model trained successfully"),',
            '    Err(e) => println!("Failed to train model: {}", e),',
            '}',
          ].join('\n')}
          lang="rust"
          title="src/main.rs"
        />

        <h3>6. Validate the Model</h3>
        <p>
          After training, we validate the model using the validation dataset.
        </p>
        <Code
          code={[
            'match model.validate(&val_data, batch_size) {',
            '    Ok(validation_loss) => println!("Validation Loss: {:.6}", validation_loss),',
            '    Err(e) => println!("Failed to validate model: {}", e),',
            '}',
          ].join('\n')}
          lang="rust"
          title="src/main.rs"
        />

        <h3>7. Evaluate the Model</h3>
        <p>Finally, we evaluate the model on the test dataset.</p>
        <Code
          code={[
            'let accuracy = model.evaluate(&test_data, batch_size).expect("Failed to evaluate the model");',
            'println!("Test Accuracy: {:.2}%", accuracy * 100.0);',
          ].join('\n')}
          lang="rust"
          title="src/main.rs"
        />

        <h3>8. Save the Model</h3>
        <p>
          Once satisfied with the model, we save it to a file for later use.
        </p>
        <Code
          code={['model.save("model_path").unwrap();'].join('\n')}
          lang="rust"
          title="src/main.rs"
        />
      </div>
    </div>
  </div>
</section>
